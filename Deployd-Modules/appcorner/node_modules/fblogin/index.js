var Resource = require('../../../lib/resource')
, util = require('util')
, request = require('request')
, http = require('http')
, crypto = require('crypto')
, SALT_LEN = 256;

function FBLogin() {
    Resource.apply(this, arguments);
}

util.inherits(FBLogin, Resource);

FBLogin.label = "FBLogin";
FBLogin.events = ["post"];

module.exports = FBLogin;

FBLogin.prototype.clientGeneration = true;


FBLogin.prototype.handle = function (ctx, next) {
    var req = ctx.req;
    var fbu = this;
    
    if (req.method === "POST"){
        
        request.get({
                     headers: {'content-type' : 'application/x-www-form-urlencoded'},
                     url:     'https://graph.facebook.com/me?fields=id&access_token='+ctx.body.accesstoken
                     }, function(error, response, body){

                        //check facebookId with body.id from accesstoken
                        if(error) return ctx.done(error);
                        if(JSON.parse(body).id  != ctx.body.facebookId)
                        {
                          ctx.res.statusCode = 401;
                          return ctx.done('bad fb credentials');                    
                        }
                    
                        //create a fake password for deployd user
                        console.log(body);
                        var md5sum = crypto.createHash('md5');
                        var hashFbId = "hashFbIdFakePassword";
                    
                        var usernameVal = ctx.body.facebookId;
                        var passwordVal = hashFbId;
                        var facebookIdVal = ctx.body.facebookId;
                    
                    fbu.store.first({username: usernameVal},
                                     function(err, user) {
                                        if(err){
                                            ctx.dpd.user.post({username: usernameVal, password: passwordVal, facebookId: facebookIdVal},
                                                              function(result, error) {
                                                                 if(err) return ctx.done(err);
                                                                 ctx.session.set({path: '/user', uid: user.id}).save(ctx.done);
                                                                 return;
                                                              });
                                                             
                                        }
                                        else if(user) {
                                                ctx.session.set({path: '/user', uid: user.id}).save(ctx.done);
                                            return;
                                        }
                                     }
                                     );
                    });                    

    } else {
        next();
    }
 
};

FBLogin.prototype.hash = function (password, salt) {
    return crypto.createHmac('sha256', salt).update(password).digest('hex');
};






