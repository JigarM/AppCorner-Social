var apns = require('apn')
  , Resource = require('../../../lib/resource')
  , util = require('util');

function Apn(name, options) {
  Resource.apply(this, arguments);
  if (!this.apnsConnection && this.config.cert && this.config.gateway && this.config.port) {
      var options = {
        cert: this.config.cert,                   // Certificate file path
        certData: this.config.certData,           // String or Buffer containing certificate data, if supplied uses this instead of cert file path
        key:  this.config.key,                    // Key file path
        keyData: this.config.keyData,             // String or Buffer containing key data, as certData
        passphrase: this.config.passphrase,       // A passphrase for the Key file
        ca: this.config.ca,                       // String or Buffer of CA data to use for the TLS connection
        gateway: this.config.gateway,             // gateway address
        port: this.config.port,                   // gateway port
        enhanced: this.config.enhanced,           // enable enhanced format
        errorCallback: this.config.errorCallback, // Callback when error occurs function(err,notification)
        cacheLength: this.config.cacheLength      // Number of notifications to cache for error purposes
      };
      this.apnsConnection = new apns.Connection(options);
  }
}

util.inherits(Apn, Resource);
module.exports = Apn;
Apn.label = "Apn";
Apn.prototype.clientGeneration = true;
Apn.events = ["post"];
Apn.basicDashboard = {
  settings: [{
      name: 'cert'
    , type: 'string'
  }, {
      name: 'certData'
    , type: 'string'
  }, {
      name: 'key'
    , type: 'string'
  }, {
      name: 'keyData'
    , type: 'string'
  }, {
      name: 'passphrase'
    , type: 'string'
  }, {
      name: 'ca'
    , type: 'string'
  }, {
      name: 'gateway'
    , type: 'string'
  }, {
      name: 'port'
    , type: 'number'
  }, {
      name: 'enhanced'
    , type: 'boolean'
  }, {
     name: 'errorCallback'
   , type: 'string'
  }, {
     name: 'cacheLength'
   , type: 'number'
}]
};

Apn.prototype.handle = function (ctx, next) {
  var req = ctx.req
    , apn = this;

  if (!this.apnsConnection) return ctx.done("Missing apn configuration!");
    
  if (req.method === "POST") {
      if(ctx.body.user && ctx.body.activity && ctx.body.activity.toUser)
      {
          ctx.dpd.channel.get({userChannel: ctx.body.activity.toUser, $sort: {updatedAt: -1}, $limit: 1},
                              function(results, error) {
                                if (error) return ctx.done(error);
                                var channels = results;
                                for (var i = 0; i < channels.length; i++) {
                                    var channel = channels[i];
                                    if(channel.deviceToken !== null && channel.deviceToken !== "")
                                    {
                                        apn.sendNotification(channel, ctx.body.user, ctx.body.activity, ctx, next);
                                    }
                                }
                              });
      }
  }
    next();
};


Apn.prototype.sendNotification = function(channel, user, activity, ctx, next) {
    var req = ctx.req
      , apn = this;
    
    //channel check
    var channelBadge = channel.badge;
    var channelToken = channel.deviceToken;
    if(channelToken === null || channelToken === ""){
        return;
    }
    
    //create message and payload
    var payload = apn.getPayload(user, activity, channel);
    
    //notification
    /*
     The special "Increment" badge value will tell that the badge
     field for each matching Channel should be incremented and the
     new value used in the push payload
     */
    if(payload.badge == 'Increment'){
        channelBadge++;
        ctx.dpd.channel.put(channel.id,{badge: {$inc: 1}},
                                        function(result, error) {
                                            if (error) return ctx.done(error);
                                        });
    }
    delete payload['badge'];                          
    var payloadAlert = payload.alert;
    delete payload['alert'];
    var payloadSound = payload.sound;
    delete payload['sound'];                                                    
                          
    var note = new apns.Notification();
    note.expiry = Math.floor(Date.now() / 1000) + (3600*12); // Expires 12 hour from now.
    note.badge = channelBadge;
    if(payloadSound)
        note.sound = payloadSound;
    if(payloadAlert)
        note.alert = payloadAlert;
    note.payload = payload; 
    note.device = new apns.Device(channelToken);
    this.apnsConnection.sendNotification(note);

};


Apn.prototype.getPayload = function(user, activity, channel) {
    
    var message = "";
    var payload;
    //comment
    if(activity.type === "c"){ //comment
        if (user.displayName) {
            message = user.displayName + ': ' + activity.content.trim();
        } else {
            if(channel.language === "it")
                message = "Qualcuno ha commentato la tua app.";
            else //default en
                message = "Someone commented on your app.";
        }
        
        // Trim our message to 100 characters.
        if (message.length > 100) {
            message = message.substring(0, 99);
        }
        
        payload = {
        alert: message, // Set our alert message.
        badge: 'Increment', // Increment the target device's badge count.
        p: 'a', // Payload Type: Activity
        t: 'c', // Activity Type: Comment
        fu: activity.fromUser, // From User
        pid: activity.id // App Id
        };
    }
    //like
    else if(activity.type === "l"){ //like
        if (user.displayName) {
            if(channel.language === "it")
                message = user.displayName + ' piace la tua app.';
            else //default en
                message = user.displayName + ' likes your app.';
        } else {
            if(channel.language === "it")
                message = "A qualcuno piace la tua app.";
            else //default en
                message = 'Someone likes your app.';
        }
        
        // Trim our message to 100 characters.
        if (message.length > 100) {
            message = message.substring(0, 99);
        }
        
        payload = {
        alert: message, // Set our alert message.
        p: 'a', // Payload Type: Activity
        t: 'l', // Activity Type: Like
        fu: activity.fromUser, // From User
        pid: activity.id // App Id
        };
    }
    //follow
    else if(activity.type === "f"){ //follow
        if (user.displayName) {
            if(channel.language === "it")
                message = user.displayName + ' ora ti sta seguendo.';
            else //default en
                message = user.displayName + ' is now following you.';
        } else {
            if(channel.language === "it")
                message = "Hai un nuovo follower.";
            else //default en
                message = "You have a new follower.";
        }
        
        // Trim our message to 100 characters.
        if (message.length > 100) {
            message = message.substring(0, 99);
        }
        
        payload = {
        alert: message, // Set our alert message.
        p: 'a', // Payload Type: Activity
        t: 'f', // Activity Type: Follow
        fu: activity.fromUser // From User
        };
    }
    return payload;
};
